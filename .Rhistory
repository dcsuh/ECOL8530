de<-function(t,x,params){
S <- x[1]
E <- x[2]
Ik <- x[3]
Iu <- x[4]
Rk <- x[5]
Ru <- x[6]
V <- x[7]
with(as.list(params),{
dS <- -beta*S*Ik - beta*S*Iu - epsilon*tau*(1-phi)*S
dE <- beta*S*Ik + beta*S*Iu - upsilon*psi*E - upsilon*(1-psi)*E
dIk <- upsilon*psi*E - alpha*Ik
dIu <- upsilon*(1-psi)*E - alpha*Iu
dRk <- alpha*Ik + epsilon*tau*phi*Ru
dRu <- alpha*Iu - epsilon*tau*phi*Ru - epsilon*(1-tau)*phi*Ru
dV <- epsilon*tau*(1-phi)*S + epsilon*(1-tau)*phi*Ru
res<-c(dS,dE,dIk,dIu,dRk,dRu,dV)
list(res)
})}
maxTime <- 100.0 # time
times<-seq(0,maxTime,by=0.1) # how often this calculates
# notes on params
# beta =      <- contact transmission rate
# phi =       <- range:0-1 probability seropositive
# alpha =     <- recovery rate
# epsilon =   <- antibody testing rate
# upsilon =   <- infected testing rate
# tau =       <- range: 0-1 antibody testing reliability
# psi =       <- range: 0-1 test effectiveness
params<-c(beta=0.0003,
phi=0.5,
alpha=1/7,
epsilon=0.1,
upsilon=0.1,
tau=1,
psi=0.5)  # model parameters
xstart<-c(S=10000,
E=0,
Ik=1,
Iu=0,
Rk=0,
Ru=0,
V=0)  # initial conditions
library(tidyverse)
library(magrittr)
library(deSolve)
library(here)
de<-function(t,x,params){
S <- x[1]
E <- x[2]
Ik <- x[3]
Iu <- x[4]
Rk <- x[5]
Ru <- x[6]
V <- x[7]
with(as.list(params),{
dS <- -beta*S*Ik - beta*S*Iu - epsilon*tau*(1-phi)*S
dE <- beta*S*Ik + beta*S*Iu - upsilon*psi*E - upsilon*(1-psi)*E
dIk <- upsilon*psi*E - alpha*Ik
dIu <- upsilon*(1-psi)*E - alpha*Iu
dRk <- alpha*Ik + epsilon*tau*phi*Ru
dRu <- alpha*Iu - epsilon*tau*phi*Ru - epsilon*(1-tau)*phi*Ru
dV <- epsilon*tau*(1-phi)*S + epsilon*(1-tau)*phi*Ru
res<-c(dS,dE,dIk,dIu,dRk,dRu,dV)
list(res)
})}
maxTime <- 100.0 # time
times<-seq(0,maxTime,by=0.1) # how often this calculates
# notes on params
# beta =      <- contact transmission rate
# phi =       <- range:0-1 probability seropositive
# alpha =     <- recovery rate
# epsilon =   <- antibody testing rate
# upsilon =   <- infected testing rate
# tau =       <- range: 0-1 antibody testing reliability
# psi =       <- range: 0-1 test effectiveness
params<-c(beta=0.0003,
phi=0.5,
alpha=1/7,
epsilon=0.1,
upsilon=0.1,
tau=1,
psi=0.5)  # model parameters
xstart<-c(S=10000,
E=0,
Ik=1,
Iu=0,
Rk=0,
Ru=0,
V=0)  # initial conditions
params<-c(beta=0.0003,
phi=0.5,
alpha=1/7,
epsilon=0.1,
upsilon=0.1,
tau=1,
psi=0.5)
R0 <-(params[1]/params[3]) #calculate R0 with current parameters
output<-as.data.frame(lsoda(xstart,times,de,params)) # tells computer to solve (integrate) equations
output$X <- output$Rk + output$V
output$HI_threshold <- (1-1/R0)*xstart[1] #add in herd immunity threshold
output %>% ggplot(.,aes(x=time))+
geom_line(aes(y=S,col="Susceptible"))+
geom_line(aes(y=E,col="Exposed"))+
geom_line(aes(y=Ik,col="Infected_k"))+
geom_line(aes(y=Iu,col="Infected_u"))+
geom_line(aes(y=Rk,col="Recovered_k"))+
geom_line(aes(y=Ru,col="Recovered_u"))+
geom_line(aes(y=V,col="Vaccinated"))+
geom_line(aes(y=X,col="X"))+
scale_colour_manual(values = c("red","orange","yellow","green","blue","purple","gray","black"))+
theme(legend.position = c(0.75,0.4))+
labs(y="N",x="Time",col="Population")+
ggtitle("Transmission Model for Antibody-Assisted Vaccinations")+
theme(plot.title = element_text(hjust=, size=10))+
geom_hline(yintercept=0.75*10000)
params<-c(beta=0.0003,
phi=0,
alpha=1/7,
epsilon=0.05,
upsilon=0.1,
tau=1,
psi=0.5)
output<-as.data.frame(lsoda(xstart,times,de,params)) # tells computer to solve (integrate) equations
output$X <- output$Rk + output$V
output$HI_threshold <- (1-1/R0)*xstart[1] #add in herd immunity threshold
output %>% ggplot(.,aes(x=time))+
geom_line(aes(y=S,col="Susceptible"))+
geom_line(aes(y=E,col="Exposed"))+
geom_line(aes(y=Ik,col="Infected_k"))+
geom_line(aes(y=Iu,col="Infected_u"))+
geom_line(aes(y=Rk,col="Recovered_k"))+
geom_line(aes(y=Ru,col="Recovered_u"))+
geom_line(aes(y=V,col="Vaccinated"))+
geom_line(aes(y=X,col="X"))+
scale_colour_manual(values = c("red","orange","yellow","green","blue","purple","gray","black"))+
theme(legend.position = c(0.75,0.4))+
labs(y="N",x="Time",col="Population")+
ggtitle("Transmission Model for Antibody-Assisted Vaccinations")+
theme(plot.title = element_text(hjust=, size=10))+
geom_hline(yintercept=0.75*10000)
params<-c(beta=0.0003,
phi=0,
alpha=1/7,
epsilon=0.05,
upsilon=0.1,
tau=1,
psi=0.5)
output<-as.data.frame(lsoda(xstart,times,de,params)) # tells computer to solve (integrate) equations
output$X <- output$Rk + output$V
output$HI_threshold <- (1-1/R0)*xstart[1] #add in herd immunity threshold
output %>% ggplot(.,aes(x=time))+
geom_line(aes(y=S,col="Susceptible"))+
geom_line(aes(y=E,col="Exposed"))+
geom_line(aes(y=Ik,col="Infected_k"))+
geom_line(aes(y=Iu,col="Infected_u"))+
geom_line(aes(y=Rk,col="Recovered_k"))+
geom_line(aes(y=Ru,col="Recovered_u"))+
geom_line(aes(y=V,col="Vaccinated"))+
geom_line(aes(y=X,col="X"))+
scale_colour_manual(values = c("red","orange","yellow","green","blue","purple","gray","black"))+
theme(legend.position = c(0.75,0.4))+
labs(y="N",x="Time",col="Population")+
ggtitle("Transmission Model for Vaccinations without antibody tests")+
theme(plot.title = element_text(hjust=, size=10))+
geom_hline(yintercept=0.75*10000)
output %>% ggplot(.,aes(x=time))+
geom_line(aes(y=S,col="Susceptible"))+
geom_line(aes(y=E,col="Exposed"))+
geom_line(aes(y=Ik,col="Infected_k"))+
geom_line(aes(y=Iu,col="Infected_u"))+
geom_line(aes(y=Rk,col="Recovered_k"))+
geom_line(aes(y=Ru,col="Recovered_u"))+
geom_line(aes(y=V,col="Vaccinated"))+
geom_line(aes(y=X,col="X"))+
scale_colour_manual(values = c("red","orange","yellow","green","blue","purple","gray","black"))+
theme(legend.position = c(0.75,0.4))+
labs(y="N",x="Time",col="Population")+
ggtitle("Transmission Model for Antibody-Assisted Vaccinations")+
theme(plot.title = element_text(hjust=, size=10))+
geom_hline(yintercept=0.75*10000)
params<-c(beta=0.0003,
phi=0.5,
alpha=1/7,
epsilon=0.1,
upsilon=0.1,
tau=1,
psi=0.5)
R0 <-(params[1]/params[3]) #calculate R0 with current parameters
output<-as.data.frame(lsoda(xstart,times,de,params)) # tells computer to solve (integrate) equations
output$X <- output$Rk + output$V
output$HI_threshold <- (1-1/R0)*xstart[1] #add in herd immunity threshold
output %>% ggplot(.,aes(x=time))+
geom_line(aes(y=S,col="Susceptible"))+
geom_line(aes(y=E,col="Exposed"))+
geom_line(aes(y=Ik,col="Infected_k"))+
geom_line(aes(y=Iu,col="Infected_u"))+
geom_line(aes(y=Rk,col="Recovered_k"))+
geom_line(aes(y=Ru,col="Recovered_u"))+
geom_line(aes(y=V,col="Vaccinated"))+
geom_line(aes(y=X,col="X"))+
scale_colour_manual(values = c("red","orange","yellow","green","blue","purple","gray","black"))+
theme(legend.position = c(0.75,0.4))+
labs(y="N",x="Time",col="Population")+
ggtitle("Transmission Dynamics for Antibody-Assisted Vaccinations")+
theme(plot.title = element_text(hjust=, size=10))+
geom_hline(yintercept=0.75*10000)
params<-c(beta=0.0003,
phi=0,
alpha=1/7,
epsilon=0.05,
upsilon=0.1,
tau=1,
psi=0.5)
output<-as.data.frame(lsoda(xstart,times,de,params)) # tells computer to solve (integrate) equations
output$X <- output$Rk + output$V
output$HI_threshold <- (1-1/R0)*xstart[1] #add in herd immunity threshold
output %>% ggplot(.,aes(x=time))+
geom_line(aes(y=S,col="Susceptible"))+
geom_line(aes(y=E,col="Exposed"))+
geom_line(aes(y=Ik,col="Infected_k"))+
geom_line(aes(y=Iu,col="Infected_u"))+
geom_line(aes(y=Rk,col="Recovered_k"))+
geom_line(aes(y=Ru,col="Recovered_u"))+
geom_line(aes(y=V,col="Vaccinated"))+
geom_line(aes(y=X,col="X"))+
scale_colour_manual(values = c("red","orange","yellow","green","blue","purple","gray","black"))+
theme(legend.position = c(0.75,0.4))+
labs(y="N",x="Time",col="Population")+
ggtitle("Transmission Dynamics for Vaccinations without antibody tests")+
theme(plot.title = element_text(hjust=, size=10))+
geom_hline(yintercept=0.75*10000)
library(tidyverse)
library(magrittr)
library(deSolve)
library(here)
library(ggnewscale)
install.packages("ggnewscale")
library(tidyverse)
library(magrittr)
library(deSolve)
library(here)
library(ggnewscale)
library(patchwork)
install.packages("patchwork")
library(tidyverse)
library(magrittr)
library(deSolve)
library(here)
library(ggnewscale)
library(patchwork)
library(lhs)
library(sensitivity)
install.packages("sensitivity")
library(sensitivity)
install.packages("sensitivity")
library(sensitivity)
